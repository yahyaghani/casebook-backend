import spacy
import pandas as pd
import os
from collections import Counter

# Load Blackstone model
nlp = spacy.load("en_blackstone_proto")

def get_top_cat(doc):
    """ Function to identify the highest scoring category prediction generated by the text categoriser. """
    cats = doc.cats
    max_score = max(cats.values())
    max_cats = [k for k, v in cats.items() if v == max_score]
    max_cat = max_cats[0]
    return max_cat, max_score

def process_text(text, global_id):
    """ Process the text to extract entities and categorization results. """
    doc = nlp(text)
    
    entities = []
    categorization = []
    
    # Extract entities
    for ent in doc.ents:
        if ent.label_ in my_labels:
            entities.append({
                'global_id': global_id,
                'entity_text': ent.text,
                'entity_label': ent.label_
            })
    
    # Categorize text
    sentences = [sent.string.strip() for sent in doc.sents]
    for sentence in sentences:
        doc = nlp(sentence)
        doc.cats.pop('UNCAT', None)
        top_category, top_score = get_top_cat(doc)
        categorization.append({
            'global_id': global_id,
            'sentence': sentence,
            'category': top_category,
            'score': top_score
        })
    
    return entities, categorization


# Define the labels of interest
my_labels = ["CITATION", "CASENAME", "PROVISION", "JUDGE", "COURT", "INSTRUMENT"]

# Load CSV file
input_csv = '/media/taymur/EXTERNAL_USB/large/legal_datasets/judgements_uk_baili/dataset_website-content-crawler_2024-06-02_09-27-11-531.csv'
output_entities_csv = 'entities_output.csv'
output_categorization_csv = 'categorization_output.csv'

df = pd.read_csv(input_csv)

# Initialize lists to hold processed data
all_entities = []
all_categorization = []

# Process each row in the CSV
for index, row in df.iterrows():
    global_id = index + 1
    text = row['text']
    entities, categorization = process_text(text, global_id)
    all_entities.extend(entities)
    all_categorization.extend(categorization)

# Convert lists to DataFrames
entities_df = pd.DataFrame(all_entities)
categorization_df = pd.DataFrame(all_categorization)

# Save to CSV files
entities_df.to_csv(output_entities_csv, index=False)
categorization_df.to_csv(output_categorization_csv, index=False)

print(f"Entities saved to {output_entities_csv}")
print(f"Categorization results saved to {output_categorization_csv}")
